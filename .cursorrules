# General Instructions File

## Project Overview
This is a fitness tracker application built using Quasar for the frontend and Supabase for the backend services, including authentication and database management. The app will include features such as user authentication, workout management, an exercise library, progress tracking, goal setting, and user preferences.

Refer to the `overview.mdc` file for the full project plan and feature details and the `screens.mdc` file for the screens and their descriptions.

---

## Features & Progress

### Core Features
- 📝 **User Authentication**
  - 📝 Login, Registration, Password Reset (Planned for last)
- 🔄 **Workout Management**
  - 🔄 Workout List Screen (In Progress)
  - 🔄 Create/Edit Workout Screen (In Progress)
  - 🔄 Workout Details Screen (In Progress)
- 🔄 **Exercise Library**
  - ✅ System Exercises Added
  - 📝 Search & Filter Exercises
  - 📝 Add/Edit Custom Exercises
- 📝 **Progress Tracking**
  - 📝 Metrics Logging
  - 📝 Charts & Analytics
  - 📝 Progress Photos
- 📝 **Goal Setting**
  - 📝 Create/Edit Goals
  - 📝 Track Goal Progress
- 📝 **User Preferences**
  - 📝 Dark/Light Theme
  - 📝 Unit Settings (Metric/Imperial)
  - 📝 Workout Reminders

### Backend Setup (✅ Completed)
1. ✅ Database Schema Created
   - Users table
   - Workouts table
   - Exercises table
   - Workout_exercises table
   - Progress table
   - Goals table
2. ✅ Row Level Security (RLS) Policies
3. ✅ Storage Bucket for Progress Photos
4. ✅ Initial System Exercises Seeded
5. ✅ Test User Created (ID: dd1b545a-7cfd-47b9-9c63-13fbdce2dd05)
6. ✅ API Services Created
   - User Service
   - Workout Service
   - Exercise Service
   - Progress Service
   - Goal Service

### Current Focus
1. 🔄 Implementing Workout Management UI
   - Creating Workout List Screen
   - Building Create/Edit Workout Form
   - Implementing Workout Details View
2. 🔄 Testing with Test User
   - Using seeded exercises
   - Creating sample workouts
   - Testing CRUD operations

### Next Steps
1. Complete Workout Management screens
2. Implement Exercise Library features
3. Add Progress Tracking functionality
4. Implement Goal Setting
5. Add User Preferences
6. Finally, implement Authentication

### Emoji Legend
- ✅ Completed
- 🔄 In Progress
- 📝 Planned/Not Started
- 🚫 Removed/Not Doing

---

## Development Priorities
1. **Build UI and core features without authentication.**
   - Skip login/registration for now to ease testing during local development.
   - Use test user (ID: dd1b545a-7cfd-47b9-9c63-13fbdce2dd05) for testing database interactions.

2. **Create core features:**
   - Workout Management (In Progress)
   - Exercise Library
   - Progress Tracking

3. **Add user preferences and customization.**

4. **Implement authentication and secure access as the final step.**

---

## Coding Standards
1. Use Quasar components (e.g., `QInput`, `QForm`, `QButton`) for consistency.
2. Keep components modular and reusable.
3. All files should follow this structure:
   - `/components`: Reusable UI components.
   - `/pages`: Screens or views (e.g., Dashboard, Workout List).
   - `/services`: API integrations (e.g., Supabase functions).
   - `/store`: State management (using Pinia or Vuex).
4. Use TypeScript for better type safety.
5. Add clear comments for complex logic.

---

## Testing Guidelines
1. For local testing, skip login/authentication until all features are implemented.
2. Use a dummy user session for interacting with the database.
3. Ensure all features (UI and API) are manually tested before marking as ✅ in the progress list.
4. Test on multiple devices for responsiveness (mobile, desktop).

---

## Notes & Reminders
1. **Supabase Setup:**
   - Ensure the `.env` file contains valid Supabase keys.
   - Use Supabase's SDK for all database and authentication logic.
2. **Deployment:**
   - Test the app thoroughly before deploying as a PWA or mobile app.

---

## Example Dummy User for Testing
To bypass login during development, use this dummy user:

```javascript
// src/services/auth.js
export const dummyUser = {
  id: '123',
  username: 'TestUser',
  email: 'testuser@example.com',
  preferences: {
    units: 'metric',
    theme: 'dark',
  },
};

// Use this dummyUser for testing instead of actual authentication
```

Replace the dummy user with real authentication logic once the app's core features are complete.

